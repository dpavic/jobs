<?php

namespace Dpavic\JobsBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Dpavic\JobsBundle\Entity\Job;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{

    public function getActiveJobs($categoryId = null, $max = null, $offset = null, $affiliateId = null)
    {
        $qb = $this->createQueryBuilder('j')
                ->where('j.expiresAt > :date')
                ->setParameter('date', date('Y-m-d H:i:s', time()))
                ->andWhere('j.isActivated = :activated')
                ->setParameter('activated', 1)
                ->orderBy('j.expiresAt', 'DESC');

        if ($max) {
            $qb->setMaxResults($max);
        }

        if ($offset) {
            $qb->setFirstResult($offset);
        }

        if ($categoryId) {
            $qb->andWhere('j.category = :categoryId')
                    ->setParameter('categoryId', $categoryId);
        }

        if ($affiliateId) {
            $qb->leftJoin('j.category', 'c')
                    ->leftJoin('c.affiliates', 'a')
                    ->andWhere('a.id = :affiliateId')
                    ->setParameter('affiliateId', $affiliateId);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getActiveJob($id)
    {
        $query = $this->createQueryBuilder('j')
                ->where('j.id = :id')
                ->setParameter('id', $id)
                ->andWhere('j.expiresAt > :date')
                ->setParameter('date', date('Y-m-d H:i:s', time()))
                ->andWhere('j.isActivated = :activated')
                ->setParameter('activated', 1)
                ->setMaxResults(1)
                ->getQuery();

        try {
            $job = $query->getSingleResult();
        }
        catch (NoResultException $e) {
            $job = null;
        }
        return $job;
    }

    public function countActiveJobs($categoryId = null)
    {
        $qb = $this->createQueryBuilder('j')
                ->select('count(j.id)')
                ->where('j.expiresAt > :date')
                ->setParameter('date', date('Y-m-d H:i:s', time()))
                ->andWhere('j.isActivated = :activated')
                ->setParameter('activated', 1);

        if ($categoryId) {
            $qb->andWhere('j.category = :categoryId')
                    ->setParameter('categoryId', $categoryId);
        }
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }

    public function getLatestPost($categoryId = null)
    {
        $query = $this->createQueryBuilder('j')
                ->where('j.expiresAt > :date')
                ->setParameter('date', date('Y-m-d H:i:s', time()))
                ->andWhere('j.isActivated = :activated')
                ->setParameter('activated', 1)
                ->orderBy('j.expiresAt', 'DESC')
                ->setMaxResults(1);

        if ($categoryId) {
            $query->andWhere('j.category = :categoryId')
                    ->setParameter('categoryId', $categoryId);
        }

        try {
            $job = $query->getQuery()->getSingleResult();
        }
        catch (NoResultException $ex) {
            $job = null;
        }

        return $job;
    }

    public function cleanup($days)
    {
        $query = $this->createQueryBuilder('j')
                ->delete()
                ->where('j.isActivated is NULL')
                ->andWhere('j.createdAt < :createdAt')
                ->setParameter('createdAt', date('Y-m-d', time() - 86400 * $days))
                ->getQuery();
        
        return $query->execute();
    }

    public function getForLuceneQuery($query)
    {
        $hits = Job::getLuceneIndex()->find($query);

        $pks = array();
        foreach ($hits as $hit) {
            $pks[] = $hit->pk;
        }

        if (empty($pks)) {
            return array();
        }

        $q = $this->createQueryBuilder('j')
                ->where('j.id IN (:pk)')
                ->setParameter('pk', $pks)
                ->andWhere('j.isActivated = :active')
                ->setParameter('active', 1)
                ->setMaxResults(20)
                ->getQuery();

        return $q->getResult();
    }

    public function getForToken($token)
    {
        
    }

}
