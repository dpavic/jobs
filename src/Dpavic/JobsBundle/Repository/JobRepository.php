<?php

namespace Dpavic\JobsBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{

    public function getActiveJobs($category_id = null, $max = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('j')
                ->where('j.expiresAt > :date')
                ->setParameter('date', date('Y-m-d H:i:s', time()))
                ->andWhere('j.isActivated = :activated')
                ->setParameter('activated', 1)
                ->orderBy('j.expiresAt', 'DESC');

        if ($max) {
            $qb->setMaxResults($max);
        }

        if ($offset) {
            $qb->setFirstResult($offset);
        }

        if ($category_id) {
            $qb->andWhere('j.category = :category_id')
                    ->setParameter('category_id', $category_id);
        }
        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getActiveJob($id)
    {
        $query = $this->createQueryBuilder('j')
                ->where('j.id = :id')
                ->setParameter('id', $id)
                ->andWhere('j.expiresAt > :date')
                ->setParameter('date', date('Y-m-d H:i:s', time()))
                ->andWhere('j.isActivated = :activated')
                ->setParameter('activated', 1)
                ->setMaxResults(1)
                ->getQuery();

        try {
            $job = $query->getSingleResult();
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            $job = null;
        }
        return $job;
    }

    public function countActiveJobs($categoryId = null)
    {
        $qb = $this->createQueryBuilder('j')
                ->select('count(j.id)')
                ->where('j.expiresAt > :date')
                ->setParameter('date', date('Y-m-d H:i:s', time()))
                ->andWhere('j.isActivated = :activated')
                ->setParameter('activated', 1);

        if ($categoryId) {
            $qb->andWhere('j.category = :categoryId')
                    ->setParameter('categoryId', $categoryId);
        }
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }

    public function getLatestPost($categoryId = null)
    {
        $query = $this->createQueryBuilder('j')
                ->where('j.expiresAt > :date')
                ->setParameter('date', date('Y-m-d H:i:s', time()))
                ->andWhere('j.isActivated = :activated')
                ->setParameter('activated', 1)
                ->orderBy('j.expiresAt', 'DESC')
                ->setMaxResults(1);
        
        if($categoryId){
            $query->andWhere('j.category = :categoryId')
                    ->setParameter('categoryId', $categoryId);
        }
        
        try{
            $job = $query->getQuery()->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $ex) {
            $job = null;
        }
        
        return $job;
    }

}
